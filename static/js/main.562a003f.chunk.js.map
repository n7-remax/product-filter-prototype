{"version":3,"sources":["App/FilterableProductTable/SearchBar/SearchBar.js","App/FilterableProductTable/Product/ProductCategoryRow.js","App/FilterableProductTable/Product/ProductRow.js","App/FilterableProductTable/Product/ProductTable.js","App/FilterableProductTable/FilterableProductTable.js","App/constants/constants.js","App/App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","handleFilterTextChange","bind","handleInStockChange","e","this","onFilterTextChange","target","value","onInStockChange","checked","type","placeholder","filterText","onChange","inStockOnly","Component","ProductCategoryRow","category","colSpan","ProductRow","product","name","stocked","style","color","price","ProductTable","rows","lastCategory","products","forEach","indexOf","push","key","FilterableProductTable","state","setState","PRODUCTS","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.562a003f.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass SearchBar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleFilterTextChange = this.handleFilterTextChange.bind(this);\r\n        this.handleInStockChange = this.handleInStockChange.bind(this);\r\n    }\r\n\r\n    handleFilterTextChange(e) {\r\n        this.props.onFilterTextChange(e.target.value )\r\n    }\r\n\r\n    handleInStockChange(e) {\r\n        this.props.onInStockChange(e.target.checked )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form>\r\n                <input type=\"text\" placeholder=\"Search...\" value={this.props.filterText} onChange={this.handleFilterTextChange} />\r\n                <p>\r\n                    <input type=\"checkbox\" checked={this.props.inStockOnly} onChange={this.handleInStockChange} />\r\n                    {' '}\r\n                    Only show products in stock\r\n                </p>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchBar","import React, { Component } from \"react\";\r\n\r\nclass ProductCategoryRow extends Component {\r\n    render() {\r\n        const category = this.props.category;\r\n        return (\r\n            <tr>\r\n                <th colSpan='2'>\r\n                    {category}\r\n                </th>\r\n            </tr>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProductCategoryRow","import React, { Component } from 'react'\r\n\r\nclass ProductRow extends Component {\r\n    render() {\r\n        const product = this.props.product;\r\n        const name = product.stocked ? product.name :\r\n            <span style={{ color: 'red' }}>\r\n                {product.name}\r\n            </span>;\r\n\r\n        return (\r\n            <tr>\r\n                <td>{name}</td>\r\n                <td>{product.price}</td>\r\n            </tr>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProductRow\r\n","import React, { Component } from 'react'\r\nimport ProductCategoryRow from './ProductCategoryRow';\r\nimport ProductRow from './ProductRow';\r\n\r\nclass ProductTable extends Component {\r\n    render() {\r\n        const filterText = this.props.filterText;\r\n        const inStockOnly = this.props.inStockOnly\r\n\r\n        const rows = [];\r\n        let lastCategory = null;\r\n\r\n        this.props.products.forEach((product) => {\r\n            if (product.name.indexOf(filterText) === -1) {\r\n              return;\r\n            }\r\n            if (inStockOnly && !product.stocked) {\r\n              return;\r\n            }\r\n            if (product.category !== lastCategory) {\r\n              rows.push(\r\n                <ProductCategoryRow\r\n                  category={product.category}\r\n                  key={product.category} />\r\n              );\r\n            }\r\n            rows.push(\r\n              <ProductRow\r\n                product={product}\r\n                key={product.name}/>\r\n            );\r\n            lastCategory = product.category;\r\n          });\r\n\r\n        return (\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <th>Price</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>{rows}</tbody>\r\n            </table>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProductTable\r\n","import React, { Component } from 'react'\r\nimport SearchBar from './SearchBar/SearchBar'\r\nimport ProductTable from './Product/ProductTable'\r\n\r\nclass FilterableProductTable extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = { filterText: '', inStockOnly: false };\r\n\r\n        this.handleFilterTextChange = this.handleFilterTextChange.bind(this);\r\n        this.handleInStockChange = this.handleInStockChange.bind(this);\r\n\r\n    }\r\n\r\n    handleFilterTextChange(filterText) {\r\n        this.setState({ filterText: filterText })\r\n    }\r\n\r\n    handleInStockChange(inStockOnly) {\r\n        this.setState({ inStockOnly: inStockOnly })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <SearchBar\r\n                    filterText={this.state.filterText}\r\n                    inStockOnly={this.state.inStockOnly}\r\n                    onFilterTextChange={this.handleFilterTextChange} \r\n                    onInStockChange={this.handleInStockChange}/>\r\n\r\n                <ProductTable\r\n                    products={this.props.products}\r\n                    filterText={this.state.filterText}\r\n                    inStockOnly={this.state.inStockOnly} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FilterableProductTable\r\n","const PRODUCTS = [\r\n    { category: 'Sporting Goods', price: '$49.99', stocked: true, name: 'Football' },\r\n    { category: 'Sporting Goods', price: '$9.99', stocked: true, name: 'Baseball' },\r\n    { category: 'Sporting Goods', price: '$29.99', stocked: false, name: 'Basketball' },\r\n    { category: 'Electronics', price: '$99.99', stocked: true, name: 'iPod Touch' },\r\n    { category: 'Electronics', price: '$399.99', stocked: false, name: 'iPhone 5' },\r\n    { category: 'Electronics', price: '$199.99', stocked: true, name: 'Nexus 7' }\r\n];\r\n\r\nexport default PRODUCTS","import React from 'react';\nimport './App.css';\nimport FilterableProductTable from './FilterableProductTable/FilterableProductTable';\nimport PRODUCTS from './constants/constants';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <FilterableProductTable products={PRODUCTS}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}